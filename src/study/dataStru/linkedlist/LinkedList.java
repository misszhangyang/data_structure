package study.dataStru.linkedlist;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Stack;

/**
 * ?????????? day07-09
 * 
 * @author yang
 *
 */
public class LinkedList<I extends Number> {
	public static void main(String[] args) {

//		Node node1 = new Node(1, "???", "lihao");
//		Node node2 = new Node(2, "???", "xiaomo");
//		Node node3 = new Node(3, "????", "zhangmi");
//		Node node4 = new Node(4, "????", "xiaofen");
//		Node newNode = new Node(4, "???????", "tianlongbabu");
//
//		SingleLinkedList singleLinkedList = new SingleLinkedList();
//		// singleLinkedList.add(node1);
//		// singleLinkedList.add(node2);
//		// singleLinkedList.add(node4);
//		// singleLinkedList.add(node3);
//
//		singleLinkedList.addBySquence(node1);
//		singleLinkedList.addBySquence(node2);
//		singleLinkedList.addBySquence(node4);
//		singleLinkedList.addBySquence(node3);
//		singleLinkedList.addBySquence(node3);
//
//		singleLinkedList.traverse();
//
//		singleLinkedList.reserver(singleLinkedList.getSingleNode());

		// singleLinkedList.traverse();
		//
		// singleLinkedList.updateNode(newNode);
		//
		// singleLinkedList.delNode(3);
		//
		// singleLinkedList.traverse();
		List<Integer> list = new ArrayList<Integer>();
		list.add(12);
		list.add(13);
		list.add(2);
        Iterator iteratot = list.iterator();
		ListIterator<Integer> i = list.listIterator();
		System.out.println(i.next());
		Collections.sort(list);
		System.out.println(list);

	}
}

// ???嵥???????Node
class SingleLinkedList {

	// ?????????????????????????????
	private Node headNode = new Node(0, " ", "");

	// ???????????????
	public Node getSingleNode() {
		return headNode;
	}

	// ????????????????
	public void add(Node node) {
		// ??????????????????????????????????????????????
		Node tmpNode = headNode;
		while (true) {
			if (tmpNode.next == null) {
				break;
			}
			// ???????????????????tepNode????
			tmpNode = tmpNode.next;
		}
		// ???????????????????????????λ??
		tmpNode.next = node;
	}

	// ????????????????????
	public void addBySquence(Node node) {
		// ?????????????????????????????
		Node tmpNode = headNode;
		boolean flag = false;
		// ???????????????????????????????no?????????????????????
		while (true) {
			if (tmpNode.next == null) {// ????????????????
				break;
			}
			if (tmpNode.next.number < node.number) {// ????????е??????????no?????????????????С???????????У???λ??????????????
				break;
			}
			if (tmpNode.next.number == node.number) {
				flag = true;
				break;
			}
			// ????????????????????????????????????node.number???tmpNode
			tmpNode = tmpNode.next;
		}
		if (flag) {
			System.out.println("????????????????У?" + node.number);
		} else {
			// ?????????????????,tmpNode??????棬tmpNode.next?????
			node.next = tmpNode.next;
			tmpNode.next = node;
		}
	}

	// ?????????
	public void updateNode(Node node) {
		// ??????????????????λ????????????
		Node tmpNode = headNode;
		boolean flag = false;
		while (true) {
			// ??????????????????????????????????λ??
			if (tmpNode.next == null) {
				break;
			}
			// ????????flag???ture????while??????????????
			if (tmpNode.next.number == node.number) {
				flag = true;
				break;
			}
			// ??????break?????????????????????????????????
			tmpNode = tmpNode.next;
		}
		if (flag) {
			System.out.println("??????????????λ?????????????" + node.number);
			tmpNode.next.name = node.name;
			tmpNode.next.nickName = node.nickName;
		} else {
			System.out.println("----????????????????λ????? ----");
		}

	}

	// ?????????(??????????????????????????λ??????????next???????)
	// ?????number??????????е?number
	public void delNode(int number) {
		Node tmpNode = headNode.next;
		boolean flag = false;
		while (true) {
			// ?????????????
			if (tmpNode == null) {
				break;
			}
			if (tmpNode.next.number == number) {
				flag = true;
				break;
			}
			tmpNode = tmpNode.next;
		}
		if (flag) {
			// ????????????????λ????????????????tmpNode,??????????????????next???tmpNode.next.next????
			tmpNode.next = tmpNode.next.next;
		} else {
			System.out.println("δ?????????λ?????????");
		}
	}

	// ???????е???????????????
	// ?·??????????????????????????????????з??
	public void reserver(Node node) {
		Node tmpNode = node.next;
		if (tmpNode == null) {
			// ????????????
			System.out.println("??????β?????????");
			return;
		}
		Stack<Node> stackNode = new Stack<Node>();
		while (tmpNode != null) {
			// ?????????????е?????????
			stackNode.push(tmpNode);
			tmpNode = tmpNode.next;
		}
		// ??while??????????????????????????
		// ???????????pop?????????????????stack.size????С????????????????????????size???
		int stackSize = stackNode.size();
		for (int i = 0; i < stackSize; i++) {
			System.out.println("?????????????????????" + stackNode.pop());
		}
	}

	// ????????
	public void traverse() {
		if (headNode.next == null) {
			System.out.println("???????---");
			return;
		}
		// ??????????????????????????????????????????????
		Node tmpNode = headNode.next;
		while (true) {
			// ??????next?????????????????????β
			if (tmpNode == null) {
				break;
			}
			// ?????????????
			System.out.println(tmpNode.toString());
			// ????????????????????????
			tmpNode = tmpNode.next;
		}
	}
}

// ????Node???
class Node {
	public int number;
	public String name;
	public String nickName;
	public Node next;

	public Node(int numberNmber, String name, String nickName) {
		this.number = numberNmber;
		this.nickName = nickName;
		this.name = name;
	}

	@Override
	public String toString() {
		return "Node [number=" + number + ", name=" + name + ", nickName=" + nickName + "]";
	}

}
